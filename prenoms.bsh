#!/bin/bash
#===============================================================================
#
#          FILE:  prenoms.bsh
#
#         USAGE:  ./prenoms.bsh
#
#   DESCRIPTION: Projet d'Unix de 1er année
#
#       OPTIONS:  -i -a <site> <lettre> <genre> <debut> <fin> -d -c -m <file>
#  REQUIREMENTS:  Bash
#          BUGS:  ---
#         NOTES:  ---
#        AUTHOR:  LAROYENNE Guillaume
#       COMPANY:  ENSISA
#       VERSION:  3.0
#       CREATED:  19/11/2017
#      REVISION:  01/12/2017
#===============================================================================


LANG="C"

HELP="./prenoms.bsh\n
\t -i \t\t\t\t\t\t Initialisation\n
\t -c \t\t\t\t\t\t Effacement de la campagne précédente\n
\t -a <site> <lettre> <genre> <debut> <fin> \t Ajout d’une nouvelle règle dans la campagne\n
\t -d \t\t\t\t\t\t Téléchargement des fichiers décrits par toutes les règles de la campagne\n
\t -e \t\t\t\t\t\t Extraction des prénoms et filtrages éventuels de tous les téléchargements\n
\t -m <fihier> \t\t\t\t\t Fusion de tous les prénoms découverts par la campagne en un seul fichier résultat dénommé fichier à la racine du répertoire courant.";

USAGE="Usage : ./prenoms.bsh [OPTION] ...";

ARGS_ERROR=-666;
INIT_ERROR=-777;

DOWNLOAD_REP="download";
EXTRACT_REP="extract";
ANALYSIS_REP="analysis";

WEB_SITES_FILE=".site.txt";
CAMPAINGN_FILE=".campaign.txt";
MOD_SITES_FILE=".mod.txt";

DOWN_EXT=".html";
EXTRACT_EXT=".ext";
analysis_EXT=".ale";

GENDER_B=("boy" "1" "garcon" "0");
GENDER_F=("girl" "2" "fille" "1");

CODE_MAS="(M)";
CODE_FEM="(F)";
CODE_MIX="(M/F)";



#===  FUNCTION  ================================================================
#          NAME: isNumeric
#   DESCRIPTION: Return void if the parameter is not a natural integer.
#    PARAMETERS: number
#       RETURNS: number
#===============================================================================

function isNumeric() {
	if [[ $# -ne 1 ]]; then
		echo "";
		return;
	fi
	echo $1 | grep "^[ [:digit:] ]*$";
}



#===  FUNCTION  ================================================================
#          NAME: isCharacter
#   DESCRIPTION: Return void if the parameter is not a character.
#    PARAMETERS: letter
#       RETURNS: letter
#===============================================================================

function isCharacter() {
	if [[ $# -ne 1 ]]; then
		echo "";
		return;
	fi

	if [[ "$1" = [a-z] ]]; then
		echo $1;
		return;
	fi

	if [[ "$1" = [A-Z] ]]; then
		echo $1;
		return;
	fi
}



#===  FUNCTION  ================================================================
#          NAME: minuscule
#   DESCRIPTION: Format the character in lowercase.
#    PARAMETERS: letter
#       RETURNS: letter
#===============================================================================

function minuscule() {
	echo $1 | tr [:upper:] [:lower:];
}



#===  FUNCTION  ================================================================
#          NAME: majuscule
#   DESCRIPTION: Format the character in upper case.
#    PARAMETERS: letter
#       RETURNS: letter
#===============================================================================

function majuscule() {
	echo $1 | tr [:lower:] [:upper:];
}



#===  FUNCTION  ================================================================
#          NAME: getHTMLChlid
#   DESCRIPTION: Return the contents of all html tags passed in parameter.
#    PARAMETERS: html_element tag_name
#       RETURNS: void
#===============================================================================

function getHTMLChlid() {
	if [[ $# -ne 2 ]]; then
		echo "[ANOMALY] invalid argument number in getHTMLChlid()" >&2;
		exit;
	fi

	tag=$2;

	echo "$1" | sed -n '/<'"$tag"'>/,/<\/'"$tag"'>/ {
               s/^.*<'"$tag"'>//
               s/<\/'"$tag"'>.*$//
               p
          }';
}



#===  FUNCTION  ================================================================
#          NAME: initialization
#   DESCRIPTION: Creates the initialization files. 
#    PARAMETERS: void
#       RETURNS: void
#===============================================================================

function initialization() {
	if [[ $# -ne 0 ]]; then
		echo "[ANOMALY] invalid argument number in initialization()" >&2;
		exit;
	fi

	{
		echo "http://prenoms.aujourdhui.com/guide/commencant-par-%letter%.asp";
		echo "http://www.mamanpourlavie.com/prenoms/lettre/%letter%/%gender%";
		echo "http://www.bebepassion.com/prenoms/prenom-%gender%-%letter%.htm";
		echo "https://www.prenoms.com/prenom/recherche.html?advanced=True&Genre=%gender%&start_with=%letter%&page=%page%";
		echo "http://nominis.cef.fr/contenus/prenom/alphabetique/%letter%-%page%.html";
		echo "http://www.quelprenom.com/liste_prenoms.php?code=FR&sexe%5B0%5D=%gender%&start=%letter%&page=%page%";
		echo "http://www.magicmaman.com/prenom/recherche/commencantpar=%letter%#?commencantpar=%letter%&frai&sexe=%gender%&page=%page%";
		echo "https://www.naissance.fr/prenoms/recherche?gender=%gender%&begin=%letter%&page=%page%";
	} > $WEB_SITES_FILE;


	{
		echo "1 - -";
		echo "1 2 -";
		echo "1 2 -";
		echo "1 3 +";
		echo "1 - +";
		echo "1 1 +";
		echo "2 1 +";
		echo "1 0 +";
	} > $MOD_SITES_FILE;
}



#===  FUNCTION  ================================================================
#          NAME: getAllSiteName
#   DESCRIPTION: Returns the name of each site in the initialization file.
#    PARAMETERS: void
#       RETURNS: name_list
#===============================================================================

function getAllSiteName() {
	if [[ $# -ne 0 ]]; then
		echo "[ANOMALY] invalid argument number in getAllSiteName()" >&2;
		exit;
	fi

	if [[ ! -e "$WEB_SITES_FILE" ]]; then
		return;
	fi

	string="";
	for line in $(cat "$WEB_SITES_FILE"); do
		tmp="${line#*//}";
		tmp="${tmp%/*}";
		tmp="${tmp#*.}";
		string+=" ${tmp%.*}";
	done

	echo "$string";
}



#===  FUNCTION  ================================================================
#          NAME: checkArgsCampaign
#   DESCRIPTION: Checks the campaign passed as a parameter and returns its 
#				 reformatted value or errors.
#    PARAMETERS: site letter gender start end
#       RETURNS: format_line/void_string
#===============================================================================

function checkArgsCampaign() {

	errors="";

	if [[ $# -lt  5 ]]; then
		echo $ARGS_ERROR;
		return;
	fi

	listNameSite=$(getAllSiteName);

	if [ "$listNameSite" = "" ] || [ ! -e "$MOD_SITES_FILE" ]; then
		echo $INIT_ERROR;
		return;	
	fi

	#================= site ====================
	site=$1;

	if [[ "$(isNumeric $site)" = "$site" ]]; then

		nbLine=$(cat "$WEB_SITES_FILE" | wc -l);

		if [ "$site" -lt "1" ] || [ "$site" -gt "$nbLine" ]; then
			errors+=" -1";
		fi

	else
		id=-1;
		count=0;
		i=0;

		for name in $listNameSite; do
			result=$(grep "$site" <<< "$name");
			if [[ "$result" = "$name" ]]; then
				id=$i;
				count=$(expr $count + 1);
			fi
			i=$(expr $i + 1);
		done

		if [ "$id" -gt "-1" ] && [ "$count" -eq "1" ]; then
			site=$(expr $id + 1);
		else
			errors+=" -2";
		fi
	fi

	#================ lettre ====================
	lettre=$2;

	if [[ "$lettre" = $(isCharacter $lettre) ]]; then
		lettre=$(minuscule "$lettre");
	else
		errors+=" -3";
	fi

	#================ genre =====================
	genre=$3;

	if [ "$genre" = "garcon" ] || [ "$genre" = "boy" ]; then
		genre=1;
	fi

	if [ "$genre" = "fille" ] || [ "$genre" = "girl" ]; then
		genre=0;
	fi

	if [ ! "$genre" = "1" ] && [ ! "$genre" = "0" ]; then
		errors+=" -4";
	fi


	#================ debut fin =================
	debut=$4;
	fin=$5;
	
	if [[ ! $(isNumeric $debut) = "$debut" ]]; then
		if [ ! "$debut" = "no" ] && [ ! "$debut" = "-" ]; then
			errors+=" -5";
		fi
		debut="-";
	fi

	if [[ ! $(isNumeric $fin) = "$fin" ]]; then
		if [ ! "$fin" = "no" ] && [ ! "$fin" = "-" ]; then
			errors+=" -6";
		fi
		fin="-";
	fi

	if [ ! "$debut" = "-" ] && [ "$fin" = "-" ] ; then
		fin=$debut;
	fi

	if [ ! "$fin" = "-" ] && [ "$debut" = "-" ] ; then
		debut=$fin;
	fi


	if [ "$debut" = "-" ] || [ "$fin" = "-" ]; then
		ppar=$(echo $(sed -n "$site"'p' "$MOD_SITES_FILE") | awk {'print $3'});
		if [[ ! "$ppar" = "-" ]]; then
			errors+=" -9";
		fi
	fi

	if [ ! "$debut" = "-" ] && [ "$debut" -lt "0" ]; then
		errors+=" -7";
	elif [ ! "$fin" = "-" ] && [ ! "$debut" = "-" ] && [ ! "$fin" -ge "$debut" ]; then
		errors+=" -8";
	fi

	if [[ ! "$errors" = "" ]]; then
		echo $errors;
		return;
	fi

	echo "$site $lettre $genre $debut $fin";
}



#===  FUNCTION  ================================================================
#          NAME: printErrors
#   DESCRIPTION: Displays the error message corresponding to the error code 
#				 passed in parameter.
#    PARAMETERS: errors
#       RETURNS: void
#===============================================================================

function printErrors() {
	if [[ $# -ne 1 ]]; then
		echo "[ANOMALY] invalid argument number in printErrors()" >&2;
		return;
	fi

	echo -e "\033[31m\n/!\ Attention erreur de commande :\n";

	for line in $1; do
		case $line in
		"-1")			echo -e "\t- Le numéro du site est invalide";
			;;
		"-2")			echo -e "\t- Le nom du site est invalide";
			;;
		"-3")			echo -e "\t- Le paramètre lettre est invalide";
			;;
		"-4")			echo -e "\t- Le paramètres genre est invalide";
			;;
		"-5")			echo -e "\t- Le paramètre debut est invalide";
			;;
		"-6")			echo -e "\t- Le paramètre fin est invalide";
			;;
		"-7")			echo -e "\t- Un numéro de page ne peut pas étre négatif";
			;;
		"-8")			echo -e "\t- Le paramètre de fin ne peut pas étre inférieur au paramètre de debut";
			;;
		"-9")			echo -e "\t- Le site demandé nécessite des paramétres de page";
			;;
		"-10")			echo -e "\t- Il n'y a aucune donnée à fusionner...\n\t  Utilisez l'option : -e";
			;;
		"-11")			echo -e "\t- Il n'y a aucune donnée à extraire...\n\t  Utilisez l'option : -d";
			;;
		"-12")			echo -e "\t- Vous ne pouvez pas extraire car vous n'avez pas de campagne\n\t  Utilisez l'option : -a";
			;;
		"-13")			echo -e "\t- Vous ne pouvez pas télécharger car vous n'avez pas initialisé le programme\n\t  Utilisez l'option : -i";
			;;
		"-14")			echo -e "\t- Vous ne pouvez pas télécharger car vous n'avez pas de campagne\n\t  Utilisez l'option : -a";
			;;
		"-15")			echo -e "\t- Option invalide -- \n\t  Saisissez « prenoms --help » pour plus d'informations.";
			;;
		"$INIT_ERROR")	echo -e "\t- Vous n'avez pas initialisé le programme...\n\t  Utiliser l'option : -i";
			;;
		"$ARGS_ERROR")	echo -e "\t- Nombre d'argument invalide...\n\t  Utilisez --help pour plus d'informations";
			;;
		*)				echo "Invalid value : [$line]" >&2;
						exit;
			;;
		esac
	done

	echo -e "\033[0m";
}



#===  FUNCTION  ================================================================
#          NAME: addCampaign
#   DESCRIPTION: Adds the campaign passed as a parameter in the campaign file.
#    PARAMETERS: site lettre genre debut fin
#       RETURNS: status (integer)
#===============================================================================

function addCampaign() {
	if [[ $# -ne 5 ]]; then
		echo "[ANOMALY] invalid argument number in addCampaign()" >&2;
		exit;
	fi
	# [1] Section critique, elle verrouille le traitement des sites non gérés (autre que 1 et 4).
	# En cas d'ajout d'un nouveau site elle doit être modifiée.
	if [ ! "$1" = "1" ] && [ ! "$1" = "4" ]; then
		return;
	fi
	# [1]

	string="";
	for (( i = 1; i <= $#; i++ )); do string+=" ${!i}"; done
	echo "$string" >> $CAMPAINGN_FILE;
}



#===  FUNCTION  ================================================================
#          NAME: deleteCampaign
#   DESCRIPTION: Delete the download and extract directory and the campaign file.
#    PARAMETERS: void
#       RETURNS: void
#===============================================================================

function deleteCampaign() {
	if [[ $# -ne 0 ]]; then
		echo "[ANOMALY] invalid argument number in deleteCampaign()" >&2;
		exit;
	fi

	if [[ -e "$CAMPAINGN_FILE" ]]; then
		rm -f "$CAMPAINGN_FILE";
	fi

	if [[ -d "$DOWNLOAD_REP/" ]]; then
		rm -r "$DOWNLOAD_REP";
	fi

	if [[ -d "$EXTRACT_REP" ]]; then
		rm -r "$EXTRACT_REP";
	fi

	if [[ -d "$ANALYSIS_REP" ]]; then
		rm -r "$ANALYSIS_REP";
	fi
}



#===  FUNCTION  ================================================================
#          NAME: download
#   DESCRIPTION: Downloads the page targeted by the URL passed as a parameter in
#				 the file passed as a parameter. If the file already exists there
#                is no download.
#    PARAMETERS: URL file_name
#       RETURNS: status (integer)
#===============================================================================

function download() {
	if [[ $# -ne 2 ]]; then
		echo "[ANOMALY] invalid argument number in download()" >&2;
		exit;
	fi

	file_path="$DOWNLOAD_REP/$2$DOWN_EXT";

	if [[ ! -d "$DOWNLOAD_REP/" ]]; then
		mkdir "$DOWNLOAD_REP";
	elif [[ -e "$file_path" ]]; then
		echo 1;
		return;
	fi

	curl -o "$file_path" "$1" 2>/dev/null;

	if [[ ! -e "$file_path" ]]; then
		echo -1;
		return;
	fi

	echo 0;
}



#===  FUNCTION  ================================================================
#          NAME: reformatURL
#   DESCRIPTION: Formats the URL according to the values ​​passed in parameter for
#				 the download.
#    PARAMETERS: URL letter gender page
#       RETURNS: URL
#===============================================================================

function reformatURL() {
	if [[ $# -ne 4 ]]; then
		echo "[ANOMALY] invalide argument number in reformatURL()" >&2;
		exit;
	fi

	url=$1; letter=$2; gender=$3; page=$4;

	url="${url//%letter%/$letter}";
	url="${url//%gender%/$gender}";
	url="${url//%page%/$page}";

	echo $url;
}



#===  FUNCTION  ================================================================
#          NAME: getFileNameAndURL
#   DESCRIPTION: Return the url and file name associated with the campaign.
#    PARAMETERS: site letter gender page
#       RETURNS: file_name URL
#===============================================================================

function getFileNameAndURL() {
	if [[ $# -ne 4 ]]; then
		echo "[ANOMALY] invalid argument number in getFileNameAndURL()" >&2;
		exit;
	fi

	if [[ ! -e "$WEB_SITES_FILE" ]]; then
		echo "[ANOMALY] initialization error" >&2;
		exit;
	fi

	site=$1; letter=$2; gender=$3; page=$4;

	url=$(sed -n "$site"'p' "$WEB_SITES_FILE");
	mod=$(sed -n "$site"'p' "$MOD_SITES_FILE");

	fileName="${site}_";

	modLetter=$(echo "$mod" | awk {'print $1'});
	if [[ ! "$modLetter" = "-" ]]; then

		if [[ "$modLetter" = "1" ]]; then
			letter=$(majuscule $letter);
		fi

		if [[ "$modLetter" = "2" ]]; then
			letter=$(expr $(echo -n "$letter" | od -An -tuC) - 96);
		fi
	else
		letter="-";
	fi

	fileName+="${letter}_";

	modGender=$(echo "$mod" | awk {'print $2'});
	
	if [[ ! "$modGender" = "-" ]]; then
		if [[ "$gender" = "1" ]]; then
			gender=${GENDER_B[$modGender]};
		elif [[ "$gender" = "0" ]]; then
			gender=${GENDER_F[$modGender]};
		else
			echo "[ANOMALY] invalid gender code">&2;
			exit;
		fi
	else
		gender="-";
	fi

	fileName+="${gender}_$page";
	
	p_url=$(reformatURL $url $letter $gender $page);

	echo "$fileName $p_url";
}



#===  FUNCTION  ================================================================
#          NAME: downloadSite
#   DESCRIPTION: Download the site associated with the campaign passed in 
#				 parameter.
#    PARAMETERS: site letter gender start end 
#       RETURNS: status (integer)
#===============================================================================

function downloadSite() {
	if [[ $# -ne 5 ]]; then
		echo "[ANOMALY] invalid argument number in downloadSite()" >&2;
		exit;
	fi

	if [[ ! -e "$WEB_SITES_FILE" ]]; then
		echo $INIT_ERROR;
		return;	
	fi

	site=$1; letter=$2; gender=$3; debut=$4; fin=$5;

	if [[ $(sed -n "$site"'p' "$MOD_SITES_FILE" | awk {'print $3'}) = "-" ]]; then
		debut=1;
		fin=1;
	fi

	for (( page = $debut; page <= $fin; page++ )); do

		fileAurl=$(getFileNameAndURL $site $letter $gender $page);
		fileName=$(echo "$fileAurl" | awk {'print $1'});
		p_url=$(echo "$fileAurl" | awk {'print $2'});
		status=$(download $p_url $fileName);

		if [[ "$status" -lt "0" ]]; then
			echo "[WARNING] download error for the page : $p_url" >&2;
		fi
	done

	echo 0;
}



#===  FUNCTION  ================================================================
#          NAME: extractAujourdhui
#   DESCRIPTION: Extract the first names of the pages from prenoms.aujourdhui.com
#    PARAMETERS: HTML_page_path
#       RETURNS: first_names_list
#===============================================================================

function extractAujourdhui() {
	if [[ $# -ne 1 ]]; then
		echo "[ANOMALY] invalid argument number in extractAujourdhui()" >&2;
		exit;
	fi

	tmp=$(sed -n '/<table class="defaultText" width="400" border="0" cellpadding="4" style="margin-left:10px;">/,/<\/table>/p' $1);
	tmp=$(echo "$tmp" | sed -e 's/<td valign="top">/<td>/g');
	tmp=$(getHTMLChlid "$tmp" "tr");
	# Récupération du contenue du tableau et nettoyage des éléments inutiles.
	tmp=$(echo "$tmp" | sed '1,13d' | sed '/align="center"/d' | sed '/<td>/d' | sed '/<\/td>/d' | sed '/span class/d');
	# Suppression de toutes les lignes vides.
	tmp=$(echo "$tmp" | sed '/^$/d' | sed '/./!d' | sed  's/^$//g');

	count=0; buffer=""; name=""; gender="";

	echo "$tmp" | while read line; do   
   		
		if [[ "$count" = "0" ]]; then
			
			gender="${line%-*}";
			gender="${gender#*-}";

			if [[ "$gender" = "boy" ]]; then
				gender="$CODE_MAS";
			elif [[ "$gender" = "girl" ]]; then
				gender="$CODE_FEM";
			elif [[ "$gender" = "mixt" ]]; then
				gender="$CODE_MIX";
			else
				echo "[ANOMALY] Invalid gender code [$gender]" >&2;
				exit;
			fi
		fi

		if [[ "$count" -eq "1" ]]; then
			name="$(getHTMLChlid "$line" "b")";
		fi

		if [[ "$count" -eq "2" ]]; then
			echo -e "$gender\t$name";
		fi

   		count=$(expr $(expr $count + 1) % 3);
	done
}



#===  FUNCTION  ================================================================
#          NAME: extractPrenoms
#   DESCRIPTION: Extract the first names of the pages from www.prenoms.com
#    PARAMETERS: HTML_page_path
#       RETURNS: first_names_list
#===============================================================================

function extractPrenoms() {
	if [[ $# -ne 1 ]]; then
		echo "[ANOMALY] invalid argument number in extractPrenoms()" >&2;
		exit;
	fi

	tmp=$(sed -n '/<div class="top-prenom resultat-colonne">/,/<\/div>/p' $1);
	tmp=$(getHTMLChlid "$tmp" "li");

	echo "$tmp" | while read line; do
   		
   		name="${line#*>}"; 
   		name="${name%<*}";
   		echo "$name";
	done
}



#===  FUNCTION  ================================================================
#          NAME: extractPage
#   DESCRIPTION: Creates the list of first names of the web page passed in 
#				 parameter.
#    PARAMETERS: HTML_page_path
#       RETURNS: first_names_list
#===============================================================================

function extractPage() {
	if [[ $# -ne 1 ]]; then
		echo "[ANOMALY] invalid argument number in extractPage()" >&2;
		exit;
	fi

	fileExtract="";
	fileName="${1#*/}";
	site=$(echo $fileName | cut -d'_' -f1);

	case $site in
		"1")	fileExtract=$(extractAujourdhui $1);
			;;
		"4")	fileExtract=$(extractPrenoms $1);
			;;
		*)		echo -1;
				return;
			;;
	esac
	# Netoyage et changement des caractéres html 
	fileExtract=$(echo "$fileExtract" | sed '/^$/d' | sed "s/&#233;/é/g" | sed "s/&#232;/è/g" | sed "s/&#235;/ë/g" | sed "s/&#239;/ï/g");
	echo "$fileExtract";
}



#===  FUNCTION  ================================================================
#          NAME: extractAll
#   DESCRIPTION: Extract the first names of all downloaded pages.
#    PARAMETERS: void
#       RETURNS: status (integer)
#===============================================================================

function extractAll() {
	if [[ $# -ne 0 ]]; then
		echo "[ANOMALY] invalid argument number in extractAll()" >&2;
		exit;
	fi

	if [ ! -d "$DOWNLOAD_REP" ] || [ "$(ls -A $DOWNLOAD_REP | wc -c)" -eq "0" ]; then
		echo -1;
		return;
	fi

	if [[ ! -d "$EXTRACT_REP" ]]; then
		mkdir "$EXTRACT_REP";
	fi

	for filePath in $DOWNLOAD_REP/*; do

		eFileName="${filePath%.*}";
		eFileName="${eFileName#*/}";
		eFileName+="$EXTRACT_EXT";

		if [[ ! -e "$EXTRACT_REP/$eFileName" ]]; then

			data=$(extractPage $filePath);

			if [[ ! "$data" = "-1" ]]; then
				echo "$data" > "$EXTRACT_REP/$eFileName";
			else
				echo "[ANOMALY] Can't process the file : $filePath" >&2;
				exit;
			fi
		fi
	done

	echo 0;
}



#===  FUNCTION  ================================================================
#          NAME: analysis
#   DESCRIPTION: creates the list of first names associated with the campaign by 
#				 filtering each page (in the analysis directory).
#    PARAMETERS: site letter gender start end 
#       RETURNS: void
#===============================================================================

function analysis() {
	if [[ $# -ne 5 ]]; then
		echo "[ANOMALY] invalid argument number in analysis()" >&2;
		exit;
	fi

	if [[ ! -e "$WEB_SITES_FILE" ]]; then
		echo $INIT_ERROR;
		return;	
	fi
	if [ ! -d "$EXTRACT_REP" ] || [ "$(ls -A $EXTRACT_REP | wc -c)" -eq "0" ]; then
		echo -1;
		return;
	fi

	if [[ ! -d "$ANALYSIS_REP" ]]; then
		mkdir "$ANALYSIS_REP";
	fi

	site=$1; letter=$2; gender=$3; debut=$4; fin=$5;

	if [[ "$(sed -n "$site"'p' "$MOD_SITES_FILE" | awk {'print $3'})" = "-" ]]; then
		debut=1; fin=1;
	fi

	for (( page = $debut; page <= $fin; page++ )); do

		fileAurl=$(getFileNameAndURL $site $letter $gender $page);
		fileName=$(echo "$fileAurl" | awk {'print $1'});
		eFilePath="$EXTRACT_REP/${fileName}$EXTRACT_EXT";

		# Protection pour le développeur
		if [[ ! -e "$eFilePath" ]]; then
			echo "[ANOMALY] File $fileName not exist" >&2;
			exit;
		fi

		aFilePath="$ANALYSIS_REP/${site}_${letter}_${gender}_${page}${analysis_EXT}";

		if [[ ! -e "$aFilePath" ]]; then

			data=$(cat "$eFilePath");
			gMod=$(echo "$fileName" | cut -d'_' -f3);

			if [[ "$gMod" = "-" ]]; then
				# Pour le site prenoms.aujourdhui.com suppression du genre non désiré
				if [[ "$gender" -eq "0" ]]; then
					data=$(echo "$data" | sed "/$CODE_MAS/d");
				elif [[ "$gender" -eq "1" ]]; then
					data=$(echo "$data" | sed "/$CODE_FEM/d");
				else
					echo "[ANOMALY] invalid format in campaign file">&2;
					exit;
				fi
			else
				# Pour le site www.prenoms.com on ajoute le genre dans la premiére colonne
				if [[ "$gMod" = "0" ]]; then
					data=$(echo "$data" | sed -e 's#^#'"${CODE_FEM}\t"'#');
				elif [[ "$gMod" = "1" ]]; then
					data=$(echo "$data" | sed -e 's#^#'"${CODE_MAS}\t"'#');
				else
					echo "[ANOMALY] invalid extract file name" >&2;
					exit;
				fi
			fi
		echo -e "$data" > "$aFilePath";	
		fi
	done
}



#===  FUNCTION  ================================================================
#          NAME: merge
#   DESCRIPTION: destination_file 
#    PARAMETERS: Merge all the analysis files in the file passed in parameter.
#       RETURNS: status (integer)
#===============================================================================

function merge() {

	if [[ $# -ne 1 ]]; then
		echo $ARGS_ERROR;
		exit;	
	fi
	if [ ! -d "$ANALYSIS_REP" ] || [ "$(ls -A $ANALYSIS_REP | wc -c)" -eq "0" ]; then
		echo -10;
		return;
	fi

	echo "$(cat $ANALYSIS_REP/*  | sed '$d' | sort -u | sort +1 -d -f)" > $1;

	echo 0;
}



#===  FUNCTION  ================================================================
#          NAME: main
#   DESCRIPTION: Main method, recursive processing of program arguments.
#    PARAMETERS: args *
#       RETURNS: void
#===============================================================================

function main() {

	if [[ $# -lt 1 ]]; then
		return;
	fi

	case $1 in

	"--help" )	echo -e "$HELP";
		;;

	"-i") 		initialization;
		;;
	
	"-d") 		if [[ ! -e "$CAMPAINGN_FILE" ]]; then
					printErrors "-14";
					exit;
				fi
				while read camp; do
					if [[ "$(downloadSite $camp)" = "$INIT_ERROR" ]]; then
					 	printErrors "-13";
					 	exit;
					fi
				done < $CAMPAINGN_FILE;
		;;

	"-c") 		deleteCampaign;
		;;

	"-a") 		camp=$(checkArgsCampaign $2 $3 $4 $5 $6); n="${camp:0:2}";
				if [ "-$(isNumeric ${n#-})" = "$n" ] && [ "$n" -lt "0" ]; then
					printErrors "$camp";
					exit;
				fi
				addCampaign $camp;
				shift 5;
		;;

	"-e")		
				if [[ ! -e "$CAMPAINGN_FILE" ]]; then
					printErrors "-12";
					exit;
				fi
				if [[ "$(extractAll)" -ne "-1" ]]; then
					while read camp; do
						if [[ "$(analysis $camp)" -lt "0" ]]; then
					 		echo -e "[ANOMALY] unable to run the analysis if the extractions data is not available.";
					 		exit;
						fi
					done < $CAMPAINGN_FILE;
				else
					printErrors "-11";
					exit;
				fi
		;;

	"-m")		status=$(merge $2);
				if [[ "$status" -lt "0" ]]; then
					printErrors "$status";
					exit;
				fi
				shift;
		;;

	*)			printErrors "-15";
				exit;
		;;
	esac

	shift;
	main $*;
}


#============================= EXEC =============================

if [[ "$#" -lt 1 ]]; then
	echo -e "$USAGE";
	exit;
fi

main $*;