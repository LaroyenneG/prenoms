#!/bin/bash
#===============================================================================
#
#          FILE:  prenoms.bsh
#
#         USAGE:  ./prenoms.bsh
#
#   DESCRIPTION: Projet d'Unix de 1er année
#
#       OPTIONS:  -i -a -d -c -m
#  REQUIREMENTS:  Bash
#          BUGS:  ---
#         NOTES:  ---
#        AUTHOR:  LAROYENNE Guillaume
#       COMPANY:  ENSISA
#       VERSION:  1.0
#       CREATED:  ---
#      REVISION:  ---
#===============================================================================

LANG="C"

#===  FUNCTION  ================================================================
#          NAME:
#   DESCRIPTION:
#    PARAMETERS:
#       RETURNS:
#===============================================================================


HELP="./prenoms.bsh\n 
\t -i \t\t\t\t\t\t Initialisation\n
\t -c \t\t\t\t\t\t Effacement de la campagne précédente\n
\t -a <site> <lettre> <genre> <debut> <fin> \t Ajout d’une nouvelle règle dans la campagne\n
\t -d \t\t\t\t\t\t Téléchargement des fichiers décrits par toutes les règles de la campagne\n
\t -e \t\t\t\t\t\t Extraction des prénoms et filtrages éventuels de tous les téléchargements\n
\t -m <fihier> \t\t\t\t\t Fusion de tous les prénoms découverts par la campagne en un seul fichier résultat dénommé fichier à la racine du répertoire courant.";

USAGE="Usage : ./prenoms.bsh [OPTION] ...";

ARGS_ERROR=-64;
INIT_ERROR=-77;

WEB_SITES_FILE=".site.txt";
CAMPAINGN_FILE=".campaign.txt";
DOWNLOAD_REP="download";
MOD_SITES_FILE=".mod.txt";

DOWN_EXT=".html";



#===  FUNCTION  ================================================================
#          NAME: isNumeric
#   DESCRIPTION: Return void if the parameter is not a natural integer.
#    PARAMETERS: number
#       RETURNS: number
#===============================================================================

function isNumeric() {
	
	if [[ "$#" -ne "1" ]]; then
		echo "";
		return;
	fi

	echo $1 | grep "^[ [:digit:] ]*$";
}


#===  FUNCTION  ================================================================
#          NAME: isCharacter
#   DESCRIPTION: Return void if the parameter is not a character.
#    PARAMETERS: letter
#       RETURNS: letter
#===============================================================================

function isCharacter() {

	if [[ "$#" -ne "1" ]]; then
		echo "";
		return;
	fi

	if [[ "$1" = [a-z] ]]; then
		echo "$1";
		return;
	fi

	if [[ "$1" = [A-Z] ]]; then
		echo "$1";
		return;
	fi
}



#===  FUNCTION  ================================================================
#          NAME: minuscule
#   DESCRIPTION: Format the character in lowercase.
#    PARAMETERS: letter
#       RETURNS: letter
#===============================================================================

function minuscule() {
	echo $1 | tr [:upper:] [:lower:];
}



#===  FUNCTION  ================================================================
#          NAME: majuscule
#   DESCRIPTION: Format the character in upper case.
#    PARAMETERS: letter
#       RETURNS: letter
#===============================================================================

function majuscule() {
	echo $1 | tr [:lower:] [:upper:];
}



#===  FUNCTION  ================================================================
#          NAME: initialization
#   DESCRIPTION: Creates the initialization files. 
#    PARAMETERS: void
#       RETURNS: void
#===============================================================================

function initialization() {

	if [[ "$#" -ne "0" ]]; then
		echo "[ANOMALY] invalid argument number in initialization()" >&2;
		exit;
	fi

	{
		echo "http://prenoms.aujourdhui.com/guide/commencant-par-%letter%.asp";
		echo "http://www.mamanpourlavie.com/prenoms/lettre/%letter%/%gender%";
		echo "http://www.bebepassion.com/prenoms/prenom-%gender%-%letter%.htm";
		echo "https://www.prenoms.com/prenom/recherche.html?advanced=True&Genre=%gender%&start_with=%letter%&page=%page%";
		echo "http://nominis.cef.fr/contenus/prenom/alphabetique/%letter%-%page%.html";
		echo "http://www.quelprenom.com/liste_prenoms.php?code=FR&sexe%5B0%5D=%gender%&start=%letter%&page=%page%";
		echo "http://www.magicmaman.com/prenom/recherche/commencantpar=%letter%#?commencantpar=%letter%&frai&sexe=%gender%&page=%page%";
		echo "https://www.naissance.fr/prenoms/recherche?gender=%gender%&begin=%letter%&page=%page%";
	} > "$WEB_SITES_FILE";


	{
		echo "1 - -";
		echo "1 2 -";
	} > "$MOD_SITES_FILE";
}



#===  FUNCTION  ================================================================
#          NAME: getAllSiteName
#   DESCRIPTION: Returns the name of each site in the initialization file.
#    PARAMETERS: void
#       RETURNS: string
#===============================================================================

function getAllSiteName() {

	if [[ "$#" -ne "0" ]]; then
		echo "[ANOMALY] invalid argument number in getAllSiteName()" >&2;
		exit;
	fi

	if [[ ! -e "$WEB_SITES_FILE" ]]; then
		return;
	fi

	string="";
	for line in $(cat "$WEB_SITES_FILE"); do
		tpm=${line#*//};
		tpm=${tpm%/*};
		tpm=${tpm#*.};
		string="$string ${tpm%.*}";
	done

	echo $string;
}



#===  FUNCTION  ================================================================
#          NAME: checkArgsCampaign
#   DESCRIPTION: Checks the campaign passed as a parameter and returns its reformatted value or errors.
#    PARAMETERS: site letter gender start end
#       RETURNS: format line or void string
#===============================================================================

function checkArgsCampaign() {

	errors="";

	if [[ "$#" -lt  "5" ]]; then
		echo "$ARGS_ERROR";
		return;
	fi

	listNameSite=$(getAllSiteName);

	if [ "$listNameSite" = "" ] || [ ! -e "$MOD_SITES_FILE" ]; then
		echo "$INIT_ERROR";
		return;	
	fi

	#================= site ====================
	site=$1;

	if [[ "$(isNumeric $site)" = "$site" ]]; then

		nbLine=$(cat "$WEB_SITES_FILE" | wc -l);

		if [ "$site" -lt "1" ] || [ "$site" -gt "$nbLine" ]; then
			errors+=" -1";
		fi

	else
		id=-1;
		count=0;
		i=0;

		for name in $listNameSite; do
			result=$(grep "$site" <<< "$name");
			if [[ "$result" = "$name" ]]; then
				id=$i;
				count=$(expr $count + 1);
			fi
			i=$(expr $i + 1);
		done

		if [ "$id" -gt "-1" ] && [ "$count" -eq "1" ]; then
			site=$(expr $id + 1);
		else
			errors+=" -2";
		fi
	fi

	#================ lettre ====================
	lettre=$2;

	if [[ "$lettre" = $(isCharacter $lettre) ]]; then
		lettre=$(minuscule "$lettre");
	else
		errors+=" -3";
	fi

	#================ genre =====================
	genre=$3;

	if [ "$genre" = "garcon" ] || [ "$genre" = "boy" ]; then
		genre=1;
	fi

	if [ "$genre" = "fille" ] || [ "$genre" = "girl" ]; then
		genre=0;
	fi

	if [ ! "$genre" = "1" ] && [ ! "$genre" = "0" ]; then
		errors+=" -4";
	fi


	#================== debut fin ==================
	debut=$4;
	fin=$5;
	
	if [[ ! $(isNumeric $debut) = "$debut" ]]; then
		if [ ! "$debut" = "no" ] && [ ! "$debut" = "-" ]; then
			errors+=" -5";
		fi

		debut="-";
	fi

	if [[ ! $(isNumeric $fin) = "$fin" ]]; then
		if [ ! "$fin" = "no" ] && [ ! "$fin" = "-" ]; then
			errors+=" -6";
		fi

		fin="-";
	fi

	if [ ! "$debut" = "-" ] && [ "$fin" = "-" ] ; then
		fin=$debut;
	fi

	if [ ! "$fin" = "-" ] && [ "$debut" = "-" ] ; then
		$debut=fin;
	fi


	if [ "$debut" = "-" ] || [ "$fin" = "-" ]; then
		mod=$(sed -n "$site"'p' "$MOD_SITES_FILE");
		echo $mod;
		if [[ ! "${mod[2]}" = "-" ]]; then
			errors+=" -9";
		fi
	fi

	if [ ! "$debut" = "-" ] && [ "$debut" -lt "0" ]; then
		errors+=" -7";
		return;
	fi

	if [ ! "$fin" = "-" ] && [ ! "$debut" = "-" ] && [ ! "$fin" -ge "$debut" ]; then
		errors+=" -8";
		return;
	fi

	if [[ ! "$errors" = "" ]]; then
		echo $errors;
		return;
	fi

	line="$site $lettre $genre $debut $fin";
	echo $line;
}



#===  FUNCTION  ================================================================
#          NAME: printCampaignErrors
#   DESCRIPTION: Informs the user of errors in his campaign.
#    PARAMETERS: errors
#       RETURNS: void
#===============================================================================

function printCampaignErrors() {
	
	if [[ "$#" -ne "1" ]]; then
		echo "[ANOMALY] invalid argument number in printCampaignErrors()" >&2;
		return;
	fi

	if [[ "$1" = "$INIT_ERROR" ]]; then
		echo -e "Vous n'avez pas initialisé le programme...\nUtiliser l'option : -i";
		return;
	fi

	if [[ "$1" = "$ARGS_ERROR" ]]; then
		echo -e "Nombre d'argument invalide...\nUtilisez --help pour plus d'informations";
		return;
	fi

	lines=$1;

	echo "Il y a des paramètres invalide dans la campagne :";

	for line in $lines; do
		case $line in
		"-1")			echo -e "\t- Le numéro du site est invalide";
			;;
		"-2")			echo -e "\t- Le nom du site est invalide";
			;;
		"-3")			echo -e "\t- Le paramètre lettre est invalide";
			;;
		"-4")			echo -e "\t- Le paramètres genre est invalide";
			;;
		"-5")			echo -e "\t- Le paramètre debut est invalide";
			;;
		"-6")			echo -e "\t- Le paramètre fin est invalide";
			;;
		"-7")			echo -e "\t -Un numéro de page ne peut pas étre négatif";
			;;
		"-8")			echo -e "\t -Le paramètre de fin ne peut pas étre inférieur au paramètre de debut";
			;;
		"-9")			echo -e "\t -Le site demandé nécessite des paramétres de page";
			;;
		*)				echo "Invalid value : [$line]" >&2;
			;;
		esac
	done
}



#===  FUNCTION  ================================================================
#          NAME: addCampaign
#   DESCRIPTION: Adds the campaign passed as a parameter in the campaign file.
#    PARAMETERS: site lettre genre debut fin
#       RETURNS: status (integer)
#===============================================================================

function addCampaign() {

	if [[ "$#" -ne "5" ]]; then
		echo "[ANOMALY] invalid argument number in addCampaign()" >&2;
		exit;
	fi

	string="";
	for (( i = 1; i <= $#; i++ )); do
		string="$string ${!i}";
	done

	echo "$string" >> "$CAMPAINGN_FILE";

	echo "0";
}



#===  FUNCTION  ================================================================
#          NAME: deleteCampaign
#   DESCRIPTION: Delete the download directory and the campaign file.
#    PARAMETERS: void
#       RETURNS: void
#===============================================================================

function deleteCampaign() {

	if [[ "$#" -ne "0" ]]; then
		echo "[ANOMALY] invalid argument number in deleteCampaign()" >&2;
		exit;
	fi

	if [[ -e "$CAMPAINGN_FILE" ]]; then
		rm -f "$CAMPAINGN_FILE";
	fi

	if [[ -d "$DOWNLOAD_REP/" ]]; then
		rm -r "$DOWNLOAD_REP";
	fi
}



#===  FUNCTION  ================================================================
#          NAME: download
#   DESCRIPTION: Downloads the page targeted by the URL passed as a parameter in
#				 the file passed as a parameter. If the file already exists there
#                is no download.
#    PARAMETERS: url file_name
#       RETURNS: status (integer)
#===============================================================================

function download() {

	if [[ $# -ne 2 ]]; then
		echo "[ANOMALY] invalid argument number in download()" >&2;
		exit;
	fi

	file_path="$DOWNLOAD_REP/$2$DOWN_EXT";

	if [[ ! -d "$DOWNLOAD_REP/" ]]; then
		mkdir "$DOWNLOAD_REP";
	elif [[ -e "$file_path" ]]; then
		echo "1";
		return;
	fi

	curl -o "$file_path" "$1" 2>/dev/null;

	if [[ ! -e "$file_path" ]]; then
		echo "-1";
		return;
	fi

	echo "0";
}



#===  FUNCTION  ================================================================
#          NAME: reformatURL
#   DESCRIPTION: Formats the URL according to the values ​​passed in parameter for the download.
#    PARAMETERS: URL letter gender page
#       RETURNS: URL
#===============================================================================

function reformatURL() {

	if [[ $# -ne 4 ]]; then
		echo "[ANOMALY] invalide argument number in reformatURL()" >&2;
		exit;
	fi

	url=$1;
	letter=$2;
	gender=$3;
	page=$4;

	url=${url//%page%/$page};
	url=${url//%letter%/$letter};
	url=${url//%gender%/$gender};

	echo $url;
}



#===  FUNCTION  ================================================================
#          NAME: downloadSite
#   DESCRIPTION: 
#    PARAMETERS: site letter gender start end 
#       RETURNS: status (integer)
#===============================================================================

function downloadSite() {

	if [[ $# -ne 5 ]]; then
		echo "[ANOMALY] invalid argument number in downloadSite()" >&2;
		exit;
	fi

	gender_b="boy 1 garcon";
	gender_f="girl 2 fille";

	filename="";

	if [[ ! -e "$WEB_SITES_FILE" ]]; then
		echo "$INIT_ERROR";
		return;	
	fi

	site=$1;
	letter=$2;
	gender=$3;
	debut=$4;
	fin=$5;

	url=$(sed -n "$site"'p' "$WEB_SITES_FILE");
	mod=$(sed -n "$site"'p' "$MOD_SITES_FILE");

	letter=$(majuscule $letter);

	if [[ ! "${mod[0]}" = "-" ]]; then
		if [[ ! "${mod[0]}" = "1" ]]; then
			letter=$(expr $(echo -n "$letter" | od -An -tuC) - 64);
		fi
		filename+="$letter";
	else
		filename+="-";
	fi

	if [[ ! "${mod[1]}" = "-" ]]; then
		if [[ "$gender" = "1" ]]; then
			$gender=$gender_b[${mod[1]}];
		else
			$gender=$gender_f[${mod[1]}];
		fi
		filename+="$gender";
	else
		filename+="-";
	fi
	
	if [[ ! "${mod[2]}" = "-" ]]; then
		for (( page = $debut; page <= $fin; page++ )); do
			p_url=$(reformatURL url $letter $gender $page);
			status=$(download p_url filename);
			if [[ "$status" -lt "0" ]]; then
				echo "Erreur de téléchargement de la page : $p_url" >&2;
			fi
		done
	fi
}



#===  FUNCTION  ================================================================
#          NAME: main
#   DESCRIPTION: Main method, recursive processing of program arguments.
#    PARAMETERS: args
#       RETURNS: void
#===============================================================================

function main() {

	if [[ "$#" -lt 1 ]]; then
		return;
	fi

	case $1 in
	"--help" )	echo -e "$HELP";
		;;
	"-i") 		initialization;
		;;
	"-d") 		if [[ ! -e "$CAMPAINGN_FILE" ]]; then
					echo -n "Vous ne pouvez pas télécharger car vous n'avez pas de campagne\nUtiliser l'option : -a";
					exit;
				fi
				camp=$(cat "$CAMPAINGN_FILE");
				for c in $camp; do
					downloadSite $c;
				done

		;;
	"-c") 		deleteCampaign;
		;;
	"-a") 		line=$(checkArgsCampaign $2 $3 $4 $5 $6);

				n=${line:0:2};

				if [ "-$(isNumeric ${n#-})" = "$n" ] && [ "$n" -lt "0" ]; then
					printCampaignErrors "$line";
					exit;
				fi

				addCampaign $line;
				
				shift 5;
		;;
	"-m")		echo -e "-m Option non géré";
		;;
	*)			echo -e "Option invalide -- \nSaisissez « prenoms --help » pour plus d'informations.";
				return;
		;;
	esac

	shift;
	main $*;
}


#=========== run ==============

if [[ "$#" -lt 1 ]]; then
	echo -e "$USAGE";
	exit;
fi

main $*;

